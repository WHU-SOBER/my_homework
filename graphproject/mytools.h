#ifndef _MYTOOLS_H_
#define _MYTOOLS_H_

//定义数组最大容量
#define MAXSIZE 1000

/*********************************************************************************/
/*********************************************************************************/
/******************************结构体定义区****************************************/
/*********************************************************************************/
/*********************************************************************************/

//邻接表节点结构体
typedef struct node {
	int num;
	struct node *next;
	int weight;
}NODE;

//边结构体
typedef struct edge {
	int start;
	int end;
	int weight;
}EDGE;

//栈结构体，其中数据类型为 EDGE* ，即 “边指针”类型
typedef struct stack {
	int data[MAXSIZE];
	int top;
}STACK;

//队列结构体，其中数据类型为 EDGE* ，即 “边指针”类型
typedef struct queue {
	int data[MAXSIZE];
	int front;
	int rear;
}QUEUE;

/*********************************************************************************/
/*********************************************************************************/
/******************************常用函数实现区***************************************/
/*********************************************************************************/
/*********************************************************************************/

//返回start->end有向边的权重
int getWeight(int start, int end, NODE *list[]);

/*********************************************************************************/
/*********************************************************************************/
/******************************栈函数定义区****************************************/
/*********************************************************************************/
/*********************************************************************************/


//栈初始化函数，为栈指针s申请动态内存，同时将所有边的起点、终点、权重初始化为-1
void initStack(STACK *s);

//判断栈空的函数，栈空则返回1，否则返回0
int is_emptyStack(STACK *s);

//判断栈满的函数，栈空则返回1，否则返回0
int is_fullStack(STACK *s);

//压栈函数，接收EDGE*类型的数据压栈。正常返回值为0，如果栈满则返回-1
int push(int n, STACK *s);

//出栈函数，将栈顶元素泵出，赋值给e。正常返回值为0，如果栈空则返回-1
int pop(STACK *s);

//取栈顶元素函数，将栈顶元素的值赋给e，但是并不影响栈顶指针。正常返回值为0，如果栈空则返回-1
int get(STACK *s);

//栈删除函数，释放栈所占内存区域，指针放空
void delStack(STACK *s);

/*********************************************************************************/
/*********************************************************************************/
/******************************队列函数定义区***************************************/
/*********************************************************************************/
/*********************************************************************************/

//队列初始化函数，为队列指针s申请动态内存，同时将所有边的起点、终点、权重初始化为-1
void initQueue(QUEUE *q);

//判断队空函数，队空则返回1，否则返回0
int is_emptyQueue(QUEUE *q);

//判断队满函数，队满则返回1，否则返回0
int is_fullQueue(QUEUE *q);

//入队函数，接收EDGE*类型的数据入队尾。正常返回值为0，如果队满则返回-1
int enqueue(int n, QUEUE *q);

//出队函数， 将队头元素出队并赋值给e.正常返回值为0，如果队空则返回-1
int dequeue( QUEUE *q);

//队列删除函数,释放队列所占内存区域，指针放空
int delQueue(QUEUE *q);
#endif
